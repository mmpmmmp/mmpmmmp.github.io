<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-20T07:44:34.294Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>啧啧</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用stream函数</title>
    <link href="http://yoursite.com/2020/05/20/mypage/streams/"/>
    <id>http://yoursite.com/2020/05/20/mypage/streams/</id>
    <published>2020-05-20T07:01:07.000Z</published>
    <updated>2020-05-20T07:44:34.294Z</updated>
    
    <content type="html"><![CDATA[<p>本篇记录了常用的stream函数<br><a id="more"></a></p><h4 id="聚合求和"><a href="#聚合求和" class="headerlink" title="聚合求和"></a>聚合求和</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; items = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">        Map&lt;String, Object&gt; item1 = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        item1.put(<span class="string">"key"</span>, <span class="string">"wo"</span>);</span><br><span class="line">        item1.put(<span class="string">"price"</span>, <span class="number">1</span>);</span><br><span class="line">        items.add(item1);</span><br><span class="line">        Map&lt;String, Object&gt; item2 = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        item2.put(<span class="string">"key"</span>, <span class="string">"yuq"</span>);</span><br><span class="line">        item2.put(<span class="string">"price"</span>, <span class="number">2</span>);</span><br><span class="line">        items.add(item2);</span><br><span class="line">        Map&lt;String, Object&gt; item3 = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        item3.put(<span class="string">"key"</span>, <span class="string">"wo"</span>);</span><br><span class="line">        item3.put(<span class="string">"price"</span>, <span class="number">100</span>);</span><br><span class="line">        items.add(item3);</span><br><span class="line">        Map&lt;Object, Double&gt; result = items.parallelStream().collect(Collectors.groupingBy(mapper -&gt; &#123; </span><br><span class="line">            <span class="keyword">return</span> mapper.get(<span class="string">"key"</span>); </span><br><span class="line">            &#125;, Collectors.summingDouble(mapper -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> ((Integer) mapper.get(<span class="string">"price"</span>)).doubleValue(); </span><br><span class="line">            &#125;)));</span><br><span class="line">        System.out.println(result); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; items = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">        <span class="comment">//省略值</span></span><br><span class="line">        System.out.println(items.stream().map(mapper -&gt;mapper.get(<span class="string">"key"</span>)).collect(Collectors.toList()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; items = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">        <span class="comment">//省略值</span></span><br><span class="line">        System.out.println(items.stream().map(mapper -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.get(<span class="string">"key"</span>); </span><br><span class="line">        &#125;).reduce((accumulator, row) -&gt; accumulator + <span class="string">","</span> + row).orElse(<span class="string">"错误"</span>)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; items = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">        <span class="comment">//省略值</span></span><br><span class="line">        items.stream().sorted(Comparator.comparing(demo::comparingByPX)).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">comparingByPX</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(map.get(<span class="string">"key"</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; items = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">        <span class="comment">//省略值</span></span><br><span class="line">        items.stream().filter(mapper -&gt; <span class="string">"目标值"</span>.equals(mapper.get(<span class="string">"key"</span>))).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇记录了常用的stream函数&lt;br&gt;
    
    </summary>
    
      <category term="stream" scheme="http://yoursite.com/categories/stream/"/>
    
    
      <category term="基础，java8，stream" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%EF%BC%8Cjava8%EF%BC%8Cstream/"/>
    
  </entry>
  
  <entry>
    <title>activiti工作流方法记录</title>
    <link href="http://yoursite.com/2020/05/20/mypage/activiti/"/>
    <id>http://yoursite.com/2020/05/20/mypage/activiti/</id>
    <published>2020-05-20T07:01:07.000Z</published>
    <updated>2020-05-20T07:56:01.016Z</updated>
    
    <content type="html"><![CDATA[<p>本篇记录了常用的activiti方法<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇记录了常用的activiti方法&lt;br&gt;
    
    </summary>
    
      <category term="activiti" scheme="http://yoursite.com/categories/activiti/"/>
    
    
      <category term="activiti，工作流" scheme="http://yoursite.com/tags/activiti%EF%BC%8C%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>规则决策引擎drool使用</title>
    <link href="http://yoursite.com/2020/05/15/mypage/rules/"/>
    <id>http://yoursite.com/2020/05/15/mypage/rules/</id>
    <published>2020-05-15T06:23:07.000Z</published>
    <updated>2020-05-15T08:40:35.172Z</updated>
    
    <content type="html"><![CDATA[<p>本篇记录了关于规则引擎drool的使用<br><a id="more"></a></p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>客户决策变动大,决策对象过。能极大优化代码,直观,后期增加规则方便,drool支持动态刷新规则表,excel可以转化为drl,<br>但是drl没有excel直观(drl比excel加载快).</p><h4 id="官方文档地址"><a href="#官方文档地址" class="headerlink" title="官方文档地址"></a>官方文档地址</h4><blockquote><p><a href="https://www.drools.org/" target="_blank" rel="noopener">https://www.drools.org/</a></p></blockquote><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.drools&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;drools-bom&lt;/artifactId&gt;</span><br><span class="line">   &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">   &lt;version&gt;7.30.0.Final&lt;/version&gt;</span><br><span class="line">   &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.kie&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;kie-api&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.drools&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;drools-compiler&lt;/artifactId&gt;</span><br><span class="line">   &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.kie.server&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;kie-server-client&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;7.30.0.Final&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.drools&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;drools-decisiontables&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;7.30.0.Final&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--excel解析--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.thoughtworks.xstream&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xstream&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.10&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="加载决策表"><a href="#加载决策表" class="headerlink" title="加载决策表"></a>加载决策表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动加载资源文件下所有决策表</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> KieContainerSessionsPool <span class="title">kieContainerSessionsPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">    KieContainer kieContainer = kieServices.getKieClasspathContainer();</span><br><span class="line">    KieContainerSessionsPool pool = kieContainer.newKieSessionsPool(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> pool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="决策表方法"><a href="#决策表方法" class="headerlink" title="决策表方法"></a>决策表方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">KieContainerSessionsPool pool;</span><br><span class="line"><span class="comment">//SummaryPaymentPlan是普通类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SummaryPaymentPlan <span class="title">getSummaryPaymentPlanPool</span> <span class="params">(SummaryPaymentPlan form)</span> </span>&#123;</span><br><span class="line">    KieSession kieSession = pool.newKieSession();</span><br><span class="line">    kieSession.insert(form);</span><br><span class="line">    <span class="keyword">int</span> count = kieSession.fireAllRules();<span class="comment">// 开始执行规则,并获取执行了多少条规则</span></span><br><span class="line">    System.out.println(<span class="string">"Fire "</span> + count + <span class="string">" rule(s)!"</span>);</span><br><span class="line">    kieSession.dispose();<span class="comment">// 关闭session</span></span><br><span class="line">    <span class="keyword">return</span> form;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="excel决策表"><a href="#excel决策表" class="headerlink" title="excel决策表"></a>excel决策表</h5><p><img src="https://raw.githubusercontent.com/mmpmmmp/img-folder/master/%E8%A7%84%E5%88%99%E5%AE%9E%E4%BE%8B%E8%A1%A8.png" alt="Image text"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇记录了关于规则引擎drool的使用&lt;br&gt;
    
    </summary>
    
      <category term="规则引擎" scheme="http://yoursite.com/categories/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="规则引擎，决策表" scheme="http://yoursite.com/tags/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E%EF%BC%8C%E5%86%B3%E7%AD%96%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js基础</title>
    <link href="http://yoursite.com/2019/12/31/mypage/vue-base/"/>
    <id>http://yoursite.com/2019/12/31/mypage/vue-base/</id>
    <published>2019-12-31T07:06:54.882Z</published>
    <updated>2018-12-25T07:41:03.461Z</updated>
    
    <content type="html"><![CDATA[<p>vue基础笔记<br><a id="more"></a></p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>安装node.js，具体看公共资源<br>安装webpack(全局安装只安装一次)：<code>npm install webpack -g</code><br>安装vue脚手架(全局安装只安装一次)：<code>npm install vue -cli -g</code></p><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><ul><li>选择一个文件cmd <code>vue init webpack 项目名</code> 创建项目</li><li>进入项目文件cmd <code>npm install</code> 安装依赖</li><li>cmd <code>npm run dev</code> 启动项目</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue基础笔记&lt;br&gt;
    
    </summary>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="备忘" scheme="http://yoursite.com/tags/%E5%A4%87%E5%BF%98/"/>
    
      <category term="VUE" scheme="http://yoursite.com/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>公共资源</title>
    <link href="http://yoursite.com/2019/12/31/mypage/public-resource/"/>
    <id>http://yoursite.com/2019/12/31/mypage/public-resource/</id>
    <published>2019-12-31T07:06:54.881Z</published>
    <updated>2018-12-25T07:41:03.555Z</updated>
    
    <content type="html"><![CDATA[<p>环境，下载地址等等<br><a id="more"></a></p><h4 id="node下载地址"><a href="#node下载地址" class="headerlink" title="node下载地址"></a>node下载地址</h4><blockquote><p>下载地址 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p></blockquote><h4 id="git下载地址"><a href="#git下载地址" class="headerlink" title="git下载地址"></a>git下载地址</h4><blockquote><p>下载地址 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p></blockquote><h4 id="npm镜像站点"><a href="#npm镜像站点" class="headerlink" title="npm镜像站点"></a>npm镜像站点</h4><p>全局安装站点：<code>npm install -g -nrm</code><br>使用镜像：<code>nrm use 站点名</code><br>查看所有站点：<code>nrm ls</code><br>添加镜像地址：<code>nrm add URL &#39;registry_name&#39;</code><br>删除镜像地址：<code>nrm del &#39;registry_name&#39;</code><br>测试镜像地址速度：<code>nrm test [&#39;registry_name&#39;]</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境，下载地址等等&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo博客搭建</title>
    <link href="http://yoursite.com/2019/12/31/mypage/hexo-tutorial/"/>
    <id>http://yoursite.com/2019/12/31/mypage/hexo-tutorial/</id>
    <published>2019-12-31T07:06:54.879Z</published>
    <updated>2018-12-25T07:41:03.722Z</updated>
    
    <content type="html"><![CDATA[<p>此文章是利用github搭建hexo博客的教程<br><a id="more"></a></p><h4 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h4><blockquote><p>下载地址 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><ul><li>cmd <strong><em>git version</em></strong> 查看git是否安装</li><li>没有安装，下载exe文件直接next</li></ul></blockquote><h4 id="2-安装Node-Js"><a href="#2-安装Node-Js" class="headerlink" title="2.安装Node.Js"></a>2.安装Node.Js</h4><blockquote><p>下载地址 <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><ul><li>cmd <strong><em>node -v</em></strong> 查看版本 </li><li>如不存在，下载msi文件，打开安装，一路next，记得在Custom Setup选择add path自动配置环境</li><li>现在版本的Node一般都集成了npm可以cmd <strong><em>npm -v</em></strong> 一下看有没有，没有一定要装，npm是神器</li></ul></blockquote><h4 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3.安装hexo"></a>3.安装hexo</h4><ul><li>选择一个文件夹，也可以新建</li><li>管理员运行命令行进入刚刚的文件夹，也可以右键git bash（一般安装git hub自带）输入：<strong><em>npm i -g hexo</em></strong> 安装hexo</li><li>cmd <strong><em>hexo -v</em></strong> 检查版本</li><li>新建项目cmd <strong><em>hexo init 项目名</em></strong> </li><li>到新建项目根目录cmd <strong><em>npm i</em></strong> 安装包</li><li>管理员cmd进入项目跟目录执行 <strong><em>hexo server</em></strong> 浏览器打开 &gt; <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></li></ul><h4 id="4-发布到github"><a href="#4-发布到github" class="headerlink" title="4.发布到github"></a>4.发布到github</h4><ul><li>新建仓库仓库名就是博客访问路径</li><li><p>打开项目，修改_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>管理员cmd进入项目跟目录先安装 <strong><em>npm install hexo-deployer-git –save</em></strong> 再执行 <strong><em>hexo generate</em></strong>  最后执行 <strong><em>hexo deploy</em></strong></p></li><li>在浏览器中输入 &gt; <a href="http://yourgithubname.github.io" target="_blank" rel="noopener">http://yourgithubname.github.io</a> 就可以看到个人博客</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文章是利用github搭建hexo博客的教程&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>md组建展示</title>
    <link href="http://yoursite.com/2019/12/31/mypage/basis/"/>
    <id>http://yoursite.com/2019/12/31/mypage/basis/</id>
    <published>2019-12-31T07:06:54.877Z</published>
    <updated>2018-12-25T07:48:55.337Z</updated>
    
    <content type="html"><![CDATA[<p>此文章是markdown语言的基础使用教程<br><a id="more"></a></p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h4 id="代码快"><a href="#代码快" class="headerlink" title="代码快"></a>代码快</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;<span class="comment">//</span></span><br></pre></td></tr></table></figure><h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><ol><li>一级第一<ol><li>二级第一</li><li>二级第二</li></ol></li><li>一级第二</li></ol><h3 id="无序集合"><a href="#无序集合" class="headerlink" title="无序集合"></a>无序集合</h3><ul><li>一级第一<ul><li>二级第二</li></ul></li></ul><ul><li>一级第二<ul><li>二级第一</li></ul></li></ul><p><strong>加粗</strong></p><p><em>斜体</em></p><p><del>删除线</del></p><blockquote><p>引用文体</p></blockquote><blockquote><p>多行引用</p><p>第三行<br>第四行 </p><blockquote><p>嵌套</p></blockquote></blockquote><hr><hr><hr><p><a href="http://baidu.com" target="_blank" rel="noopener">超链接</a></p><p><img src="https://www.baidu.com/img/bd_logo1.png" alt="图片"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文章是markdown语言的基础使用教程&lt;br&gt;
    
    </summary>
    
      <category term="语言" scheme="http://yoursite.com/categories/%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>多线程的任务常用线程池</title>
    <link href="http://yoursite.com/2018/12/25/mypage/threadtask/"/>
    <id>http://yoursite.com/2018/12/25/mypage/threadtask/</id>
    <published>2018-12-25T07:09:07.000Z</published>
    <updated>2020-05-15T06:20:45.897Z</updated>
    
    <content type="html"><![CDATA[<p>本篇记录了关于多线程任务使用过的线程池</p><a id="more"></a><hr><h4 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h4><p>使用ForkJoinPool的好处在于能遍历把任务拆分为各个小单元任务，进而缓解服务器压力</p><h4 id="ForkJoinPool示例代码"><a href="#ForkJoinPool示例代码" class="headerlink" title="ForkJoinPool示例代码"></a>ForkJoinPool示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputeTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Object</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;List&lt;String&gt;&gt; list;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ComputeTask</span><span class="params">(List&lt;List&lt;String&gt;&gt; list, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.list = list;</span><br><span class="line"><span class="keyword">this</span>.start = start;</span><br><span class="line"><span class="keyword">this</span>.end = end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(end - start &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">//业务代码</span></span><br><span class="line"><span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//循环调用</span></span><br><span class="line"><span class="keyword">int</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line">ComputeTask leftTask = <span class="keyword">new</span> ComputeTask(list, start, middle);</span><br><span class="line">ComputeTask rightTask = <span class="keyword">new</span> ComputeTask(list, middle+<span class="number">1</span>, end);</span><br><span class="line">leftTask.fork();</span><br><span class="line">rightTask.fork();</span><br><span class="line">leftTask.join();</span><br><span class="line">rightTask.join();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">runClass</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">        ComputeTask task = <span class="keyword">new</span> ComputeTask(list, <span class="number">0</span>, list.size()-<span class="number">1</span>);</span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        ForkJoinTask&lt;Object&gt; result = forkJoinPool.submit(task);</span><br><span class="line">        result.get();</span><br><span class="line">     &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇记录了关于多线程任务使用过的线程池&lt;/p&gt;
    
    </summary>
    
      <category term="线程池" scheme="http://yoursite.com/categories/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
</feed>
